{"version":3,"file":"valibot.js","sources":["../src/valibot.ts"],"sourcesContent":["import { toNestErrors } from '@hookform/resolvers';\nimport type { Resolver } from './types';\nimport {\n  BaseSchema,\n  BaseSchemaAsync,\n  ValiError,\n  parse,\n  parseAsync,\n} from 'valibot';\nimport { FieldErrors, FieldError, appendErrors } from 'react-hook-form';\nconst parseErrors = (\n  valiErrors: ValiError,\n  validateAllFieldCriteria: boolean,\n): FieldErrors => {\n  const errors: Record<string, FieldError> = {};\n\n  for (const error of valiErrors.issues) {\n    if (!error.path) {\n      continue;\n    }\n    const _path = error.path.map(({ key }) => key).join('.');\n\n    if (!errors[_path]) {\n      errors[_path] = { message: error.message, type: error.validation };\n    }\n\n    if (validateAllFieldCriteria) {\n      const types = errors[_path].types;\n      const messages = types && types[error.validation];\n\n      errors[_path] = appendErrors(\n        _path,\n        validateAllFieldCriteria,\n        errors,\n        error.validation,\n        messages\n          ? ([] as string[]).concat(messages as string[], error.message)\n          : error.message,\n      ) as FieldError;\n    }\n  }\n\n  return errors;\n};\n\nexport const valibotResolver: Resolver =\n  (schema, schemaOptions, resolverOptions = {}) =>\n  async (values, _, options) => {\n    try {\n      const schemaOpts = Object.assign(\n        {},\n        {\n          abortEarly: false,\n          abortPipeEarly: false,\n        },\n        schemaOptions,\n      );\n\n      const parsed =\n        resolverOptions.mode === 'sync'\n          ? parse(schema as BaseSchema, values, schemaOpts)\n          : await parseAsync(\n              schema as BaseSchema | BaseSchemaAsync,\n              values,\n              schemaOpts,\n            );\n\n      return {\n        values: resolverOptions.raw ? values : parsed,\n        errors: {} as FieldErrors,\n      };\n    } catch (error) {\n      if (error instanceof ValiError) {\n        return {\n          values: {},\n          errors: toNestErrors(\n            parseErrors(\n              error,\n              !options.shouldUseNativeValidation &&\n                options.criteriaMode === 'all',\n            ),\n            options,\n          ),\n        };\n      }\n\n      throw error;\n    }\n  };\n"],"names":["parseErrors","valiErrors","validateAllFieldCriteria","_step","errors","_iterator","_createForOfIteratorHelperLoose","issues","done","error","value","path","_path","map","_ref","key","join","message","type","validation","types","messages","appendErrors","concat","schema","schemaOptions","resolverOptions","values","_","options","Promise","resolve","_temp2","parsed","raw","schemaOpts","Object","assign","abortEarly","abortPipeEarly","mode","parse","parseAsync","then","_catch","ValiError","toNestErrors","shouldUseNativeValidation","criteriaMode","e","reject"],"mappings":"iMAUA,IAAMA,EAAc,SAClBC,EACAC,GAIA,IAFA,IAEqCC,EAF/BC,EAAqC,CAAE,EAE7CC,2qBAAAC,CAAoBL,EAAWM,UAAMJ,EAAAE,KAAAG,MAAE,CAA5B,IAAAC,EAAKN,EAAAO,MACd,GAAKD,EAAME,KAAX,CAGA,IAAMC,EAAQH,EAAME,KAAKE,IAAI,SAAAC,UAAMA,EAAHC,GAAa,GAAEC,KAAK,KAMpD,GAJKZ,EAAOQ,KACVR,EAAOQ,GAAS,CAAEK,QAASR,EAAMQ,QAASC,KAAMT,EAAMU,aAGpDjB,EAA0B,CAC5B,IAAMkB,EAAQhB,EAAOQ,GAAOQ,MACtBC,EAAWD,GAASA,EAAMX,EAAMU,YAEtCf,EAAOQ,GAASU,EAAYA,aAC1BV,EACAV,EACAE,EACAK,EAAMU,WACNE,EACK,GAAgBE,OAAOF,EAAsBZ,EAAMQ,SACpDR,EAAMQ,QAEb,CApBA,CAqBF,CAED,OAAOb,CACT,0BAGE,SAACoB,EAAQC,EAAeC,GAAoB,gBAApBA,IAAAA,EAAkB,IAAE,SACrCC,EAAQC,EAAGC,GAAW,IAAA,OAAAC,QAAAC,gCACvB,WAAA,SAAAC,EAUIC,GASN,MAAO,CACLN,OAAQD,EAAgBQ,IAAMP,EAASM,EACvC7B,OAAQ,GACR,CArBF,IAAM+B,EAAaC,OAAOC,OACxB,GACA,CACEC,YAAY,EACZC,gBAAgB,GAElBd,GAI+B,MAAN,SAAzBC,EAAgBc,KAAeR,EAC3BS,EAAAA,MAAMjB,EAAsBG,EAAQQ,IAAWL,QAAAC,QACzCW,aACJlB,EACAG,EACAQ,IACDQ,KAAAX,EAMR,6DAxB0BY,CACvB,EAuBH,SAAQnC,GACP,GAAIA,aAAiBoC,YACnB,MAAO,CACLlB,OAAQ,CAAE,EACVvB,OAAQ0C,EAAYA,aAClB9C,EACES,GACCoB,EAAQkB,2BACkB,QAAzBlB,EAAQmB,cAEZnB,IAKN,MAAMpB,CACP,GACH,CAAC,MAAAwC,UAAAnB,QAAAoB,OAAAD,EAAA,CAAA,CAAA"}